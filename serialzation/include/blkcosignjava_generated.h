// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BLKCOSIGNJAVA_JAVASERVER_H_
#define FLATBUFFERS_GENERATED_BLKCOSIGNJAVA_JAVASERVER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 9,
             "Non-compatible flatbuffers version included");

namespace javaserver {

struct BlkCoSignJava;
struct BlkCoSignJavaBuilder;

struct BlkCoSignJava FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BlkCoSignJavaBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_M_BSERVER = 4,
    VT_M_HCOSIGN = 6,
    VT_M_BFINAL = 8
  };
  int64_t m_bServer() const {
    return GetField<int64_t>(VT_M_BSERVER, 0);
  }
  uint64_t m_hCoSign() const {
    return GetField<uint64_t>(VT_M_HCOSIGN, 0);
  }
  int64_t m_bFinal() const {
    return GetField<int64_t>(VT_M_BFINAL, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_M_BSERVER, 8) &&
           VerifyField<uint64_t>(verifier, VT_M_HCOSIGN, 8) &&
           VerifyField<int64_t>(verifier, VT_M_BFINAL, 8) &&
           verifier.EndTable();
  }
};

struct BlkCoSignJavaBuilder {
  typedef BlkCoSignJava Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_m_bServer(int64_t m_bServer) {
    fbb_.AddElement<int64_t>(BlkCoSignJava::VT_M_BSERVER, m_bServer, 0);
  }
  void add_m_hCoSign(uint64_t m_hCoSign) {
    fbb_.AddElement<uint64_t>(BlkCoSignJava::VT_M_HCOSIGN, m_hCoSign, 0);
  }
  void add_m_bFinal(int64_t m_bFinal) {
    fbb_.AddElement<int64_t>(BlkCoSignJava::VT_M_BFINAL, m_bFinal, 0);
  }
  explicit BlkCoSignJavaBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BlkCoSignJava> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BlkCoSignJava>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BlkCoSignJava> CreateBlkCoSignJava(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t m_bServer = 0,
    uint64_t m_hCoSign = 0,
    int64_t m_bFinal = 0) {
  BlkCoSignJavaBuilder builder_(_fbb);
  builder_.add_m_bFinal(m_bFinal);
  builder_.add_m_hCoSign(m_hCoSign);
  builder_.add_m_bServer(m_bServer);
  return builder_.Finish();
}

inline const javaserver::BlkCoSignJava *GetBlkCoSignJava(const void *buf) {
  return ::flatbuffers::GetRoot<javaserver::BlkCoSignJava>(buf);
}

inline const javaserver::BlkCoSignJava *GetSizePrefixedBlkCoSignJava(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<javaserver::BlkCoSignJava>(buf);
}

inline bool VerifyBlkCoSignJavaBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<javaserver::BlkCoSignJava>(nullptr);
}

inline bool VerifySizePrefixedBlkCoSignJavaBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<javaserver::BlkCoSignJava>(nullptr);
}

inline void FinishBlkCoSignJavaBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<javaserver::BlkCoSignJava> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBlkCoSignJavaBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<javaserver::BlkCoSignJava> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace javaserver

#endif  // FLATBUFFERS_GENERATED_BLKCOSIGNJAVA_JAVASERVER_H_
