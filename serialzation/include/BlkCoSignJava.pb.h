// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BlkCoSignJava.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BlkCoSignJava_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BlkCoSignJava_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BlkCoSignJava_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BlkCoSignJava_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BlkCoSignJava_2eproto;
namespace proto {
class BlkCoSign;
struct BlkCoSignDefaultTypeInternal;
extern BlkCoSignDefaultTypeInternal _BlkCoSign_default_instance_;
class BlkCoSignJava;
struct BlkCoSignJavaDefaultTypeInternal;
extern BlkCoSignJavaDefaultTypeInternal _BlkCoSignJava_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::BlkCoSign* Arena::CreateMaybeMessage<::proto::BlkCoSign>(Arena*);
template<> ::proto::BlkCoSignJava* Arena::CreateMaybeMessage<::proto::BlkCoSignJava>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class BlkCoSign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.BlkCoSign) */ {
 public:
  inline BlkCoSign() : BlkCoSign(nullptr) {}
  ~BlkCoSign() override;
  explicit PROTOBUF_CONSTEXPR BlkCoSign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlkCoSign(const BlkCoSign& from);
  BlkCoSign(BlkCoSign&& from) noexcept
    : BlkCoSign() {
    *this = ::std::move(from);
  }

  inline BlkCoSign& operator=(const BlkCoSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlkCoSign& operator=(BlkCoSign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlkCoSign& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlkCoSign* internal_default_instance() {
    return reinterpret_cast<const BlkCoSign*>(
               &_BlkCoSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlkCoSign& a, BlkCoSign& b) {
    a.Swap(&b);
  }
  inline void Swap(BlkCoSign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlkCoSign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlkCoSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlkCoSign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlkCoSign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlkCoSign& from) {
    BlkCoSign::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlkCoSign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.BlkCoSign";
  }
  protected:
  explicit BlkCoSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMPu8PriKeyFieldNumber = 2,
    kMPu8HashValueFieldNumber = 3,
    kMPu8ValueKFieldNumber = 4,
    kMPu8PointQFieldNumber = 5,
    kMPu8RFieldNumber = 6,
    kMU32VersionFieldNumber = 1,
    kMU32NumFieldNumber = 7,
  };
  // bytes m_pu8PriKey = 2;
  void clear_m_pu8prikey();
  const std::string& m_pu8prikey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_m_pu8prikey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_m_pu8prikey();
  PROTOBUF_NODISCARD std::string* release_m_pu8prikey();
  void set_allocated_m_pu8prikey(std::string* m_pu8prikey);
  private:
  const std::string& _internal_m_pu8prikey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_pu8prikey(const std::string& value);
  std::string* _internal_mutable_m_pu8prikey();
  public:

  // bytes m_pu8HashValue = 3;
  void clear_m_pu8hashvalue();
  const std::string& m_pu8hashvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_m_pu8hashvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_m_pu8hashvalue();
  PROTOBUF_NODISCARD std::string* release_m_pu8hashvalue();
  void set_allocated_m_pu8hashvalue(std::string* m_pu8hashvalue);
  private:
  const std::string& _internal_m_pu8hashvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_pu8hashvalue(const std::string& value);
  std::string* _internal_mutable_m_pu8hashvalue();
  public:

  // bytes m_pu8ValueK = 4;
  void clear_m_pu8valuek();
  const std::string& m_pu8valuek() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_m_pu8valuek(ArgT0&& arg0, ArgT... args);
  std::string* mutable_m_pu8valuek();
  PROTOBUF_NODISCARD std::string* release_m_pu8valuek();
  void set_allocated_m_pu8valuek(std::string* m_pu8valuek);
  private:
  const std::string& _internal_m_pu8valuek() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_pu8valuek(const std::string& value);
  std::string* _internal_mutable_m_pu8valuek();
  public:

  // bytes m_pu8PointQ = 5;
  void clear_m_pu8pointq();
  const std::string& m_pu8pointq() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_m_pu8pointq(ArgT0&& arg0, ArgT... args);
  std::string* mutable_m_pu8pointq();
  PROTOBUF_NODISCARD std::string* release_m_pu8pointq();
  void set_allocated_m_pu8pointq(std::string* m_pu8pointq);
  private:
  const std::string& _internal_m_pu8pointq() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_pu8pointq(const std::string& value);
  std::string* _internal_mutable_m_pu8pointq();
  public:

  // bytes m_pu8R = 6;
  void clear_m_pu8r();
  const std::string& m_pu8r() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_m_pu8r(ArgT0&& arg0, ArgT... args);
  std::string* mutable_m_pu8r();
  PROTOBUF_NODISCARD std::string* release_m_pu8r();
  void set_allocated_m_pu8r(std::string* m_pu8r);
  private:
  const std::string& _internal_m_pu8r() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m_pu8r(const std::string& value);
  std::string* _internal_mutable_m_pu8r();
  public:

  // uint32 m_u32Version = 1;
  void clear_m_u32version();
  uint32_t m_u32version() const;
  void set_m_u32version(uint32_t value);
  private:
  uint32_t _internal_m_u32version() const;
  void _internal_set_m_u32version(uint32_t value);
  public:

  // uint32 m_u32Num = 7;
  void clear_m_u32num();
  uint32_t m_u32num() const;
  void set_m_u32num(uint32_t value);
  private:
  uint32_t _internal_m_u32num() const;
  void _internal_set_m_u32num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.BlkCoSign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_pu8prikey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_pu8hashvalue_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_pu8valuek_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_pu8pointq_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_pu8r_;
    uint32_t m_u32version_;
    uint32_t m_u32num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BlkCoSignJava_2eproto;
};
// -------------------------------------------------------------------

class BlkCoSignJava final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.BlkCoSignJava) */ {
 public:
  inline BlkCoSignJava() : BlkCoSignJava(nullptr) {}
  ~BlkCoSignJava() override;
  explicit PROTOBUF_CONSTEXPR BlkCoSignJava(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlkCoSignJava(const BlkCoSignJava& from);
  BlkCoSignJava(BlkCoSignJava&& from) noexcept
    : BlkCoSignJava() {
    *this = ::std::move(from);
  }

  inline BlkCoSignJava& operator=(const BlkCoSignJava& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlkCoSignJava& operator=(BlkCoSignJava&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlkCoSignJava& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlkCoSignJava* internal_default_instance() {
    return reinterpret_cast<const BlkCoSignJava*>(
               &_BlkCoSignJava_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlkCoSignJava& a, BlkCoSignJava& b) {
    a.Swap(&b);
  }
  inline void Swap(BlkCoSignJava* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlkCoSignJava* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlkCoSignJava* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlkCoSignJava>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlkCoSignJava& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlkCoSignJava& from) {
    BlkCoSignJava::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlkCoSignJava* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.BlkCoSignJava";
  }
  protected:
  explicit BlkCoSignJava(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMPCoSignFieldNumber = 3,
    kMBServerFieldNumber = 1,
    kMBFinalFieldNumber = 2,
  };
  // .proto.BlkCoSign m_pCoSign = 3;
  bool has_m_pcosign() const;
  private:
  bool _internal_has_m_pcosign() const;
  public:
  void clear_m_pcosign();
  const ::proto::BlkCoSign& m_pcosign() const;
  PROTOBUF_NODISCARD ::proto::BlkCoSign* release_m_pcosign();
  ::proto::BlkCoSign* mutable_m_pcosign();
  void set_allocated_m_pcosign(::proto::BlkCoSign* m_pcosign);
  private:
  const ::proto::BlkCoSign& _internal_m_pcosign() const;
  ::proto::BlkCoSign* _internal_mutable_m_pcosign();
  public:
  void unsafe_arena_set_allocated_m_pcosign(
      ::proto::BlkCoSign* m_pcosign);
  ::proto::BlkCoSign* unsafe_arena_release_m_pcosign();

  // int64 m_bServer = 1;
  void clear_m_bserver();
  int64_t m_bserver() const;
  void set_m_bserver(int64_t value);
  private:
  int64_t _internal_m_bserver() const;
  void _internal_set_m_bserver(int64_t value);
  public:

  // int64 m_bFinal = 2;
  void clear_m_bfinal();
  int64_t m_bfinal() const;
  void set_m_bfinal(int64_t value);
  private:
  int64_t _internal_m_bfinal() const;
  void _internal_set_m_bfinal(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.BlkCoSignJava)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::BlkCoSign* m_pcosign_;
    int64_t m_bserver_;
    int64_t m_bfinal_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BlkCoSignJava_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlkCoSign

// uint32 m_u32Version = 1;
inline void BlkCoSign::clear_m_u32version() {
  _impl_.m_u32version_ = 0u;
}
inline uint32_t BlkCoSign::_internal_m_u32version() const {
  return _impl_.m_u32version_;
}
inline uint32_t BlkCoSign::m_u32version() const {
  // @@protoc_insertion_point(field_get:proto.BlkCoSign.m_u32Version)
  return _internal_m_u32version();
}
inline void BlkCoSign::_internal_set_m_u32version(uint32_t value) {
  
  _impl_.m_u32version_ = value;
}
inline void BlkCoSign::set_m_u32version(uint32_t value) {
  _internal_set_m_u32version(value);
  // @@protoc_insertion_point(field_set:proto.BlkCoSign.m_u32Version)
}

// bytes m_pu8PriKey = 2;
inline void BlkCoSign::clear_m_pu8prikey() {
  _impl_.m_pu8prikey_.ClearToEmpty();
}
inline const std::string& BlkCoSign::m_pu8prikey() const {
  // @@protoc_insertion_point(field_get:proto.BlkCoSign.m_pu8PriKey)
  return _internal_m_pu8prikey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlkCoSign::set_m_pu8prikey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.m_pu8prikey_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.BlkCoSign.m_pu8PriKey)
}
inline std::string* BlkCoSign::mutable_m_pu8prikey() {
  std::string* _s = _internal_mutable_m_pu8prikey();
  // @@protoc_insertion_point(field_mutable:proto.BlkCoSign.m_pu8PriKey)
  return _s;
}
inline const std::string& BlkCoSign::_internal_m_pu8prikey() const {
  return _impl_.m_pu8prikey_.Get();
}
inline void BlkCoSign::_internal_set_m_pu8prikey(const std::string& value) {
  
  _impl_.m_pu8prikey_.Set(value, GetArenaForAllocation());
}
inline std::string* BlkCoSign::_internal_mutable_m_pu8prikey() {
  
  return _impl_.m_pu8prikey_.Mutable(GetArenaForAllocation());
}
inline std::string* BlkCoSign::release_m_pu8prikey() {
  // @@protoc_insertion_point(field_release:proto.BlkCoSign.m_pu8PriKey)
  return _impl_.m_pu8prikey_.Release();
}
inline void BlkCoSign::set_allocated_m_pu8prikey(std::string* m_pu8prikey) {
  if (m_pu8prikey != nullptr) {
    
  } else {
    
  }
  _impl_.m_pu8prikey_.SetAllocated(m_pu8prikey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.m_pu8prikey_.IsDefault()) {
    _impl_.m_pu8prikey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.BlkCoSign.m_pu8PriKey)
}

// bytes m_pu8HashValue = 3;
inline void BlkCoSign::clear_m_pu8hashvalue() {
  _impl_.m_pu8hashvalue_.ClearToEmpty();
}
inline const std::string& BlkCoSign::m_pu8hashvalue() const {
  // @@protoc_insertion_point(field_get:proto.BlkCoSign.m_pu8HashValue)
  return _internal_m_pu8hashvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlkCoSign::set_m_pu8hashvalue(ArgT0&& arg0, ArgT... args) {
 
 _impl_.m_pu8hashvalue_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.BlkCoSign.m_pu8HashValue)
}
inline std::string* BlkCoSign::mutable_m_pu8hashvalue() {
  std::string* _s = _internal_mutable_m_pu8hashvalue();
  // @@protoc_insertion_point(field_mutable:proto.BlkCoSign.m_pu8HashValue)
  return _s;
}
inline const std::string& BlkCoSign::_internal_m_pu8hashvalue() const {
  return _impl_.m_pu8hashvalue_.Get();
}
inline void BlkCoSign::_internal_set_m_pu8hashvalue(const std::string& value) {
  
  _impl_.m_pu8hashvalue_.Set(value, GetArenaForAllocation());
}
inline std::string* BlkCoSign::_internal_mutable_m_pu8hashvalue() {
  
  return _impl_.m_pu8hashvalue_.Mutable(GetArenaForAllocation());
}
inline std::string* BlkCoSign::release_m_pu8hashvalue() {
  // @@protoc_insertion_point(field_release:proto.BlkCoSign.m_pu8HashValue)
  return _impl_.m_pu8hashvalue_.Release();
}
inline void BlkCoSign::set_allocated_m_pu8hashvalue(std::string* m_pu8hashvalue) {
  if (m_pu8hashvalue != nullptr) {
    
  } else {
    
  }
  _impl_.m_pu8hashvalue_.SetAllocated(m_pu8hashvalue, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.m_pu8hashvalue_.IsDefault()) {
    _impl_.m_pu8hashvalue_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.BlkCoSign.m_pu8HashValue)
}

// bytes m_pu8ValueK = 4;
inline void BlkCoSign::clear_m_pu8valuek() {
  _impl_.m_pu8valuek_.ClearToEmpty();
}
inline const std::string& BlkCoSign::m_pu8valuek() const {
  // @@protoc_insertion_point(field_get:proto.BlkCoSign.m_pu8ValueK)
  return _internal_m_pu8valuek();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlkCoSign::set_m_pu8valuek(ArgT0&& arg0, ArgT... args) {
 
 _impl_.m_pu8valuek_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.BlkCoSign.m_pu8ValueK)
}
inline std::string* BlkCoSign::mutable_m_pu8valuek() {
  std::string* _s = _internal_mutable_m_pu8valuek();
  // @@protoc_insertion_point(field_mutable:proto.BlkCoSign.m_pu8ValueK)
  return _s;
}
inline const std::string& BlkCoSign::_internal_m_pu8valuek() const {
  return _impl_.m_pu8valuek_.Get();
}
inline void BlkCoSign::_internal_set_m_pu8valuek(const std::string& value) {
  
  _impl_.m_pu8valuek_.Set(value, GetArenaForAllocation());
}
inline std::string* BlkCoSign::_internal_mutable_m_pu8valuek() {
  
  return _impl_.m_pu8valuek_.Mutable(GetArenaForAllocation());
}
inline std::string* BlkCoSign::release_m_pu8valuek() {
  // @@protoc_insertion_point(field_release:proto.BlkCoSign.m_pu8ValueK)
  return _impl_.m_pu8valuek_.Release();
}
inline void BlkCoSign::set_allocated_m_pu8valuek(std::string* m_pu8valuek) {
  if (m_pu8valuek != nullptr) {
    
  } else {
    
  }
  _impl_.m_pu8valuek_.SetAllocated(m_pu8valuek, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.m_pu8valuek_.IsDefault()) {
    _impl_.m_pu8valuek_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.BlkCoSign.m_pu8ValueK)
}

// bytes m_pu8PointQ = 5;
inline void BlkCoSign::clear_m_pu8pointq() {
  _impl_.m_pu8pointq_.ClearToEmpty();
}
inline const std::string& BlkCoSign::m_pu8pointq() const {
  // @@protoc_insertion_point(field_get:proto.BlkCoSign.m_pu8PointQ)
  return _internal_m_pu8pointq();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlkCoSign::set_m_pu8pointq(ArgT0&& arg0, ArgT... args) {
 
 _impl_.m_pu8pointq_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.BlkCoSign.m_pu8PointQ)
}
inline std::string* BlkCoSign::mutable_m_pu8pointq() {
  std::string* _s = _internal_mutable_m_pu8pointq();
  // @@protoc_insertion_point(field_mutable:proto.BlkCoSign.m_pu8PointQ)
  return _s;
}
inline const std::string& BlkCoSign::_internal_m_pu8pointq() const {
  return _impl_.m_pu8pointq_.Get();
}
inline void BlkCoSign::_internal_set_m_pu8pointq(const std::string& value) {
  
  _impl_.m_pu8pointq_.Set(value, GetArenaForAllocation());
}
inline std::string* BlkCoSign::_internal_mutable_m_pu8pointq() {
  
  return _impl_.m_pu8pointq_.Mutable(GetArenaForAllocation());
}
inline std::string* BlkCoSign::release_m_pu8pointq() {
  // @@protoc_insertion_point(field_release:proto.BlkCoSign.m_pu8PointQ)
  return _impl_.m_pu8pointq_.Release();
}
inline void BlkCoSign::set_allocated_m_pu8pointq(std::string* m_pu8pointq) {
  if (m_pu8pointq != nullptr) {
    
  } else {
    
  }
  _impl_.m_pu8pointq_.SetAllocated(m_pu8pointq, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.m_pu8pointq_.IsDefault()) {
    _impl_.m_pu8pointq_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.BlkCoSign.m_pu8PointQ)
}

// bytes m_pu8R = 6;
inline void BlkCoSign::clear_m_pu8r() {
  _impl_.m_pu8r_.ClearToEmpty();
}
inline const std::string& BlkCoSign::m_pu8r() const {
  // @@protoc_insertion_point(field_get:proto.BlkCoSign.m_pu8R)
  return _internal_m_pu8r();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlkCoSign::set_m_pu8r(ArgT0&& arg0, ArgT... args) {
 
 _impl_.m_pu8r_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.BlkCoSign.m_pu8R)
}
inline std::string* BlkCoSign::mutable_m_pu8r() {
  std::string* _s = _internal_mutable_m_pu8r();
  // @@protoc_insertion_point(field_mutable:proto.BlkCoSign.m_pu8R)
  return _s;
}
inline const std::string& BlkCoSign::_internal_m_pu8r() const {
  return _impl_.m_pu8r_.Get();
}
inline void BlkCoSign::_internal_set_m_pu8r(const std::string& value) {
  
  _impl_.m_pu8r_.Set(value, GetArenaForAllocation());
}
inline std::string* BlkCoSign::_internal_mutable_m_pu8r() {
  
  return _impl_.m_pu8r_.Mutable(GetArenaForAllocation());
}
inline std::string* BlkCoSign::release_m_pu8r() {
  // @@protoc_insertion_point(field_release:proto.BlkCoSign.m_pu8R)
  return _impl_.m_pu8r_.Release();
}
inline void BlkCoSign::set_allocated_m_pu8r(std::string* m_pu8r) {
  if (m_pu8r != nullptr) {
    
  } else {
    
  }
  _impl_.m_pu8r_.SetAllocated(m_pu8r, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.m_pu8r_.IsDefault()) {
    _impl_.m_pu8r_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.BlkCoSign.m_pu8R)
}

// uint32 m_u32Num = 7;
inline void BlkCoSign::clear_m_u32num() {
  _impl_.m_u32num_ = 0u;
}
inline uint32_t BlkCoSign::_internal_m_u32num() const {
  return _impl_.m_u32num_;
}
inline uint32_t BlkCoSign::m_u32num() const {
  // @@protoc_insertion_point(field_get:proto.BlkCoSign.m_u32Num)
  return _internal_m_u32num();
}
inline void BlkCoSign::_internal_set_m_u32num(uint32_t value) {
  
  _impl_.m_u32num_ = value;
}
inline void BlkCoSign::set_m_u32num(uint32_t value) {
  _internal_set_m_u32num(value);
  // @@protoc_insertion_point(field_set:proto.BlkCoSign.m_u32Num)
}

// -------------------------------------------------------------------

// BlkCoSignJava

// int64 m_bServer = 1;
inline void BlkCoSignJava::clear_m_bserver() {
  _impl_.m_bserver_ = int64_t{0};
}
inline int64_t BlkCoSignJava::_internal_m_bserver() const {
  return _impl_.m_bserver_;
}
inline int64_t BlkCoSignJava::m_bserver() const {
  // @@protoc_insertion_point(field_get:proto.BlkCoSignJava.m_bServer)
  return _internal_m_bserver();
}
inline void BlkCoSignJava::_internal_set_m_bserver(int64_t value) {
  
  _impl_.m_bserver_ = value;
}
inline void BlkCoSignJava::set_m_bserver(int64_t value) {
  _internal_set_m_bserver(value);
  // @@protoc_insertion_point(field_set:proto.BlkCoSignJava.m_bServer)
}

// int64 m_bFinal = 2;
inline void BlkCoSignJava::clear_m_bfinal() {
  _impl_.m_bfinal_ = int64_t{0};
}
inline int64_t BlkCoSignJava::_internal_m_bfinal() const {
  return _impl_.m_bfinal_;
}
inline int64_t BlkCoSignJava::m_bfinal() const {
  // @@protoc_insertion_point(field_get:proto.BlkCoSignJava.m_bFinal)
  return _internal_m_bfinal();
}
inline void BlkCoSignJava::_internal_set_m_bfinal(int64_t value) {
  
  _impl_.m_bfinal_ = value;
}
inline void BlkCoSignJava::set_m_bfinal(int64_t value) {
  _internal_set_m_bfinal(value);
  // @@protoc_insertion_point(field_set:proto.BlkCoSignJava.m_bFinal)
}

// .proto.BlkCoSign m_pCoSign = 3;
inline bool BlkCoSignJava::_internal_has_m_pcosign() const {
  return this != internal_default_instance() && _impl_.m_pcosign_ != nullptr;
}
inline bool BlkCoSignJava::has_m_pcosign() const {
  return _internal_has_m_pcosign();
}
inline void BlkCoSignJava::clear_m_pcosign() {
  if (GetArenaForAllocation() == nullptr && _impl_.m_pcosign_ != nullptr) {
    delete _impl_.m_pcosign_;
  }
  _impl_.m_pcosign_ = nullptr;
}
inline const ::proto::BlkCoSign& BlkCoSignJava::_internal_m_pcosign() const {
  const ::proto::BlkCoSign* p = _impl_.m_pcosign_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::BlkCoSign&>(
      ::proto::_BlkCoSign_default_instance_);
}
inline const ::proto::BlkCoSign& BlkCoSignJava::m_pcosign() const {
  // @@protoc_insertion_point(field_get:proto.BlkCoSignJava.m_pCoSign)
  return _internal_m_pcosign();
}
inline void BlkCoSignJava::unsafe_arena_set_allocated_m_pcosign(
    ::proto::BlkCoSign* m_pcosign) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.m_pcosign_);
  }
  _impl_.m_pcosign_ = m_pcosign;
  if (m_pcosign) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.BlkCoSignJava.m_pCoSign)
}
inline ::proto::BlkCoSign* BlkCoSignJava::release_m_pcosign() {
  
  ::proto::BlkCoSign* temp = _impl_.m_pcosign_;
  _impl_.m_pcosign_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::BlkCoSign* BlkCoSignJava::unsafe_arena_release_m_pcosign() {
  // @@protoc_insertion_point(field_release:proto.BlkCoSignJava.m_pCoSign)
  
  ::proto::BlkCoSign* temp = _impl_.m_pcosign_;
  _impl_.m_pcosign_ = nullptr;
  return temp;
}
inline ::proto::BlkCoSign* BlkCoSignJava::_internal_mutable_m_pcosign() {
  
  if (_impl_.m_pcosign_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::BlkCoSign>(GetArenaForAllocation());
    _impl_.m_pcosign_ = p;
  }
  return _impl_.m_pcosign_;
}
inline ::proto::BlkCoSign* BlkCoSignJava::mutable_m_pcosign() {
  ::proto::BlkCoSign* _msg = _internal_mutable_m_pcosign();
  // @@protoc_insertion_point(field_mutable:proto.BlkCoSignJava.m_pCoSign)
  return _msg;
}
inline void BlkCoSignJava::set_allocated_m_pcosign(::proto::BlkCoSign* m_pcosign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.m_pcosign_;
  }
  if (m_pcosign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(m_pcosign);
    if (message_arena != submessage_arena) {
      m_pcosign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, m_pcosign, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.m_pcosign_ = m_pcosign;
  // @@protoc_insertion_point(field_set_allocated:proto.BlkCoSignJava.m_pCoSign)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BlkCoSignJava_2eproto
