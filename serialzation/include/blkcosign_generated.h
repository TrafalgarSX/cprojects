// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BLKCOSIGN_SERVER_H_
#define FLATBUFFERS_GENERATED_BLKCOSIGN_SERVER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 9,
             "Non-compatible flatbuffers version included");

namespace server {

struct BlkCoSign;
struct BlkCoSignBuilder;

struct BlkCoSign FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BlkCoSignBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_M_U32VERSION = 4,
    VT_M_PU8PRIKEY = 6,
    VT_M_PU8HASHVALUE = 8,
    VT_M_PU8VALUEK = 10,
    VT_M_PU8POINTQ = 12,
    VT_M_PU8R = 14,
    VT_M_U32NUM = 16
  };
  uint32_t m_u32Version() const {
    return GetField<uint32_t>(VT_M_U32VERSION, 0);
  }
  const ::flatbuffers::Vector<uint8_t> *m_pu8PriKey() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_M_PU8PRIKEY);
  }
  const ::flatbuffers::Vector<uint8_t> *m_pu8HashValue() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_M_PU8HASHVALUE);
  }
  const ::flatbuffers::Vector<uint8_t> *m_pu8ValueK() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_M_PU8VALUEK);
  }
  const ::flatbuffers::Vector<uint8_t> *m_pu8PointQ() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_M_PU8POINTQ);
  }
  const ::flatbuffers::Vector<uint8_t> *m_pu8R() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_M_PU8R);
  }
  uint32_t m_u32Num() const {
    return GetField<uint32_t>(VT_M_U32NUM, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_M_U32VERSION, 4) &&
           VerifyOffset(verifier, VT_M_PU8PRIKEY) &&
           verifier.VerifyVector(m_pu8PriKey()) &&
           VerifyOffset(verifier, VT_M_PU8HASHVALUE) &&
           verifier.VerifyVector(m_pu8HashValue()) &&
           VerifyOffset(verifier, VT_M_PU8VALUEK) &&
           verifier.VerifyVector(m_pu8ValueK()) &&
           VerifyOffset(verifier, VT_M_PU8POINTQ) &&
           verifier.VerifyVector(m_pu8PointQ()) &&
           VerifyOffset(verifier, VT_M_PU8R) &&
           verifier.VerifyVector(m_pu8R()) &&
           VerifyField<uint32_t>(verifier, VT_M_U32NUM, 4) &&
           verifier.EndTable();
  }
};

struct BlkCoSignBuilder {
  typedef BlkCoSign Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_m_u32Version(uint32_t m_u32Version) {
    fbb_.AddElement<uint32_t>(BlkCoSign::VT_M_U32VERSION, m_u32Version, 0);
  }
  void add_m_pu8PriKey(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> m_pu8PriKey) {
    fbb_.AddOffset(BlkCoSign::VT_M_PU8PRIKEY, m_pu8PriKey);
  }
  void add_m_pu8HashValue(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> m_pu8HashValue) {
    fbb_.AddOffset(BlkCoSign::VT_M_PU8HASHVALUE, m_pu8HashValue);
  }
  void add_m_pu8ValueK(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> m_pu8ValueK) {
    fbb_.AddOffset(BlkCoSign::VT_M_PU8VALUEK, m_pu8ValueK);
  }
  void add_m_pu8PointQ(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> m_pu8PointQ) {
    fbb_.AddOffset(BlkCoSign::VT_M_PU8POINTQ, m_pu8PointQ);
  }
  void add_m_pu8R(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> m_pu8R) {
    fbb_.AddOffset(BlkCoSign::VT_M_PU8R, m_pu8R);
  }
  void add_m_u32Num(uint32_t m_u32Num) {
    fbb_.AddElement<uint32_t>(BlkCoSign::VT_M_U32NUM, m_u32Num, 0);
  }
  explicit BlkCoSignBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BlkCoSign> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BlkCoSign>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BlkCoSign> CreateBlkCoSign(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t m_u32Version = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> m_pu8PriKey = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> m_pu8HashValue = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> m_pu8ValueK = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> m_pu8PointQ = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> m_pu8R = 0,
    uint32_t m_u32Num = 0) {
  BlkCoSignBuilder builder_(_fbb);
  builder_.add_m_u32Num(m_u32Num);
  builder_.add_m_pu8R(m_pu8R);
  builder_.add_m_pu8PointQ(m_pu8PointQ);
  builder_.add_m_pu8ValueK(m_pu8ValueK);
  builder_.add_m_pu8HashValue(m_pu8HashValue);
  builder_.add_m_pu8PriKey(m_pu8PriKey);
  builder_.add_m_u32Version(m_u32Version);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<BlkCoSign> CreateBlkCoSignDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t m_u32Version = 0,
    const std::vector<uint8_t> *m_pu8PriKey = nullptr,
    const std::vector<uint8_t> *m_pu8HashValue = nullptr,
    const std::vector<uint8_t> *m_pu8ValueK = nullptr,
    const std::vector<uint8_t> *m_pu8PointQ = nullptr,
    const std::vector<uint8_t> *m_pu8R = nullptr,
    uint32_t m_u32Num = 0) {
  auto m_pu8PriKey__ = m_pu8PriKey ? _fbb.CreateVector<uint8_t>(*m_pu8PriKey) : 0;
  auto m_pu8HashValue__ = m_pu8HashValue ? _fbb.CreateVector<uint8_t>(*m_pu8HashValue) : 0;
  auto m_pu8ValueK__ = m_pu8ValueK ? _fbb.CreateVector<uint8_t>(*m_pu8ValueK) : 0;
  auto m_pu8PointQ__ = m_pu8PointQ ? _fbb.CreateVector<uint8_t>(*m_pu8PointQ) : 0;
  auto m_pu8R__ = m_pu8R ? _fbb.CreateVector<uint8_t>(*m_pu8R) : 0;
  return server::CreateBlkCoSign(
      _fbb,
      m_u32Version,
      m_pu8PriKey__,
      m_pu8HashValue__,
      m_pu8ValueK__,
      m_pu8PointQ__,
      m_pu8R__,
      m_u32Num);
}

inline const server::BlkCoSign *GetBlkCoSign(const void *buf) {
  return ::flatbuffers::GetRoot<server::BlkCoSign>(buf);
}

inline const server::BlkCoSign *GetSizePrefixedBlkCoSign(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<server::BlkCoSign>(buf);
}

inline bool VerifyBlkCoSignBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<server::BlkCoSign>(nullptr);
}

inline bool VerifySizePrefixedBlkCoSignBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<server::BlkCoSign>(nullptr);
}

inline void FinishBlkCoSignBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<server::BlkCoSign> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBlkCoSignBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<server::BlkCoSign> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace server

#endif  // FLATBUFFERS_GENERATED_BLKCOSIGN_SERVER_H_
