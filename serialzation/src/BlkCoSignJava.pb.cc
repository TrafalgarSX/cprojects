// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BlkCoSignJava.proto

#include "BlkCoSignJava.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR BlkCoSign::BlkCoSign(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_pu8prikey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_pu8hashvalue_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_pu8valuek_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_pu8pointq_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_pu8r_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_u32version_)*/0u
  , /*decltype(_impl_.m_u32num_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlkCoSignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlkCoSignDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlkCoSignDefaultTypeInternal() {}
  union {
    BlkCoSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlkCoSignDefaultTypeInternal _BlkCoSign_default_instance_;
PROTOBUF_CONSTEXPR BlkCoSignJava::BlkCoSignJava(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.m_pcosign_)*/nullptr
  , /*decltype(_impl_.m_bserver_)*/int64_t{0}
  , /*decltype(_impl_.m_bfinal_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlkCoSignJavaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlkCoSignJavaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlkCoSignJavaDefaultTypeInternal() {}
  union {
    BlkCoSignJava _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlkCoSignJavaDefaultTypeInternal _BlkCoSignJava_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_BlkCoSignJava_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_BlkCoSignJava_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_BlkCoSignJava_2eproto = nullptr;

const uint32_t TableStruct_BlkCoSignJava_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::BlkCoSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::BlkCoSign, _impl_.m_u32version_),
  PROTOBUF_FIELD_OFFSET(::proto::BlkCoSign, _impl_.m_pu8prikey_),
  PROTOBUF_FIELD_OFFSET(::proto::BlkCoSign, _impl_.m_pu8hashvalue_),
  PROTOBUF_FIELD_OFFSET(::proto::BlkCoSign, _impl_.m_pu8valuek_),
  PROTOBUF_FIELD_OFFSET(::proto::BlkCoSign, _impl_.m_pu8pointq_),
  PROTOBUF_FIELD_OFFSET(::proto::BlkCoSign, _impl_.m_pu8r_),
  PROTOBUF_FIELD_OFFSET(::proto::BlkCoSign, _impl_.m_u32num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::BlkCoSignJava, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::BlkCoSignJava, _impl_.m_bserver_),
  PROTOBUF_FIELD_OFFSET(::proto::BlkCoSignJava, _impl_.m_bfinal_),
  PROTOBUF_FIELD_OFFSET(::proto::BlkCoSignJava, _impl_.m_pcosign_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::BlkCoSign)},
  { 13, -1, -1, sizeof(::proto::BlkCoSignJava)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_BlkCoSign_default_instance_._instance,
  &::proto::_BlkCoSignJava_default_instance_._instance,
};

const char descriptor_table_protodef_BlkCoSignJava_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023BlkCoSignJava.proto\022\005proto\"\232\001\n\tBlkCoSi"
  "gn\022\024\n\014m_u32Version\030\001 \001(\r\022\023\n\013m_pu8PriKey\030"
  "\002 \001(\014\022\026\n\016m_pu8HashValue\030\003 \001(\014\022\023\n\013m_pu8Va"
  "lueK\030\004 \001(\014\022\023\n\013m_pu8PointQ\030\005 \001(\014\022\016\n\006m_pu8"
  "R\030\006 \001(\014\022\020\n\010m_u32Num\030\007 \001(\r\"Y\n\rBlkCoSignJa"
  "va\022\021\n\tm_bServer\030\001 \001(\003\022\020\n\010m_bFinal\030\002 \001(\003\022"
  "#\n\tm_pCoSign\030\003 \001(\0132\020.proto.BlkCoSignb\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_BlkCoSignJava_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_BlkCoSignJava_2eproto = {
    false, false, 284, descriptor_table_protodef_BlkCoSignJava_2eproto,
    "BlkCoSignJava.proto",
    &descriptor_table_BlkCoSignJava_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_BlkCoSignJava_2eproto::offsets,
    file_level_metadata_BlkCoSignJava_2eproto, file_level_enum_descriptors_BlkCoSignJava_2eproto,
    file_level_service_descriptors_BlkCoSignJava_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_BlkCoSignJava_2eproto_getter() {
  return &descriptor_table_BlkCoSignJava_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_BlkCoSignJava_2eproto(&descriptor_table_BlkCoSignJava_2eproto);
namespace proto {

// ===================================================================

class BlkCoSign::_Internal {
 public:
};

BlkCoSign::BlkCoSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.BlkCoSign)
}
BlkCoSign::BlkCoSign(const BlkCoSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlkCoSign* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_pu8prikey_){}
    , decltype(_impl_.m_pu8hashvalue_){}
    , decltype(_impl_.m_pu8valuek_){}
    , decltype(_impl_.m_pu8pointq_){}
    , decltype(_impl_.m_pu8r_){}
    , decltype(_impl_.m_u32version_){}
    , decltype(_impl_.m_u32num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_pu8prikey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_pu8prikey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_pu8prikey().empty()) {
    _this->_impl_.m_pu8prikey_.Set(from._internal_m_pu8prikey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.m_pu8hashvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_pu8hashvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_pu8hashvalue().empty()) {
    _this->_impl_.m_pu8hashvalue_.Set(from._internal_m_pu8hashvalue(), 
      _this->GetArenaForAllocation());
  }
  _impl_.m_pu8valuek_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_pu8valuek_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_pu8valuek().empty()) {
    _this->_impl_.m_pu8valuek_.Set(from._internal_m_pu8valuek(), 
      _this->GetArenaForAllocation());
  }
  _impl_.m_pu8pointq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_pu8pointq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_pu8pointq().empty()) {
    _this->_impl_.m_pu8pointq_.Set(from._internal_m_pu8pointq(), 
      _this->GetArenaForAllocation());
  }
  _impl_.m_pu8r_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_pu8r_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_m_pu8r().empty()) {
    _this->_impl_.m_pu8r_.Set(from._internal_m_pu8r(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.m_u32version_, &from._impl_.m_u32version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_u32num_) -
    reinterpret_cast<char*>(&_impl_.m_u32version_)) + sizeof(_impl_.m_u32num_));
  // @@protoc_insertion_point(copy_constructor:proto.BlkCoSign)
}

inline void BlkCoSign::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.m_pu8prikey_){}
    , decltype(_impl_.m_pu8hashvalue_){}
    , decltype(_impl_.m_pu8valuek_){}
    , decltype(_impl_.m_pu8pointq_){}
    , decltype(_impl_.m_pu8r_){}
    , decltype(_impl_.m_u32version_){0u}
    , decltype(_impl_.m_u32num_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.m_pu8prikey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_pu8prikey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_pu8hashvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_pu8hashvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_pu8valuek_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_pu8valuek_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_pu8pointq_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_pu8pointq_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_pu8r_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_pu8r_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlkCoSign::~BlkCoSign() {
  // @@protoc_insertion_point(destructor:proto.BlkCoSign)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlkCoSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_pu8prikey_.Destroy();
  _impl_.m_pu8hashvalue_.Destroy();
  _impl_.m_pu8valuek_.Destroy();
  _impl_.m_pu8pointq_.Destroy();
  _impl_.m_pu8r_.Destroy();
}

void BlkCoSign::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlkCoSign::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BlkCoSign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_pu8prikey_.ClearToEmpty();
  _impl_.m_pu8hashvalue_.ClearToEmpty();
  _impl_.m_pu8valuek_.ClearToEmpty();
  _impl_.m_pu8pointq_.ClearToEmpty();
  _impl_.m_pu8r_.ClearToEmpty();
  ::memset(&_impl_.m_u32version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.m_u32num_) -
      reinterpret_cast<char*>(&_impl_.m_u32version_)) + sizeof(_impl_.m_u32num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlkCoSign::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 m_u32Version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.m_u32version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes m_pu8PriKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_m_pu8prikey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes m_pu8HashValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_m_pu8hashvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes m_pu8ValueK = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_m_pu8valuek();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes m_pu8PointQ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_m_pu8pointq();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes m_pu8R = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_m_pu8r();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 m_u32Num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.m_u32num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlkCoSign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.BlkCoSign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 m_u32Version = 1;
  if (this->_internal_m_u32version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_m_u32version(), target);
  }

  // bytes m_pu8PriKey = 2;
  if (!this->_internal_m_pu8prikey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_m_pu8prikey(), target);
  }

  // bytes m_pu8HashValue = 3;
  if (!this->_internal_m_pu8hashvalue().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_m_pu8hashvalue(), target);
  }

  // bytes m_pu8ValueK = 4;
  if (!this->_internal_m_pu8valuek().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_m_pu8valuek(), target);
  }

  // bytes m_pu8PointQ = 5;
  if (!this->_internal_m_pu8pointq().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_m_pu8pointq(), target);
  }

  // bytes m_pu8R = 6;
  if (!this->_internal_m_pu8r().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_m_pu8r(), target);
  }

  // uint32 m_u32Num = 7;
  if (this->_internal_m_u32num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_m_u32num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BlkCoSign)
  return target;
}

size_t BlkCoSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BlkCoSign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes m_pu8PriKey = 2;
  if (!this->_internal_m_pu8prikey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_pu8prikey());
  }

  // bytes m_pu8HashValue = 3;
  if (!this->_internal_m_pu8hashvalue().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_pu8hashvalue());
  }

  // bytes m_pu8ValueK = 4;
  if (!this->_internal_m_pu8valuek().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_pu8valuek());
  }

  // bytes m_pu8PointQ = 5;
  if (!this->_internal_m_pu8pointq().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_pu8pointq());
  }

  // bytes m_pu8R = 6;
  if (!this->_internal_m_pu8r().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m_pu8r());
  }

  // uint32 m_u32Version = 1;
  if (this->_internal_m_u32version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_m_u32version());
  }

  // uint32 m_u32Num = 7;
  if (this->_internal_m_u32num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_m_u32num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlkCoSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlkCoSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlkCoSign::GetClassData() const { return &_class_data_; }


void BlkCoSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlkCoSign*>(&to_msg);
  auto& from = static_cast<const BlkCoSign&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.BlkCoSign)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_m_pu8prikey().empty()) {
    _this->_internal_set_m_pu8prikey(from._internal_m_pu8prikey());
  }
  if (!from._internal_m_pu8hashvalue().empty()) {
    _this->_internal_set_m_pu8hashvalue(from._internal_m_pu8hashvalue());
  }
  if (!from._internal_m_pu8valuek().empty()) {
    _this->_internal_set_m_pu8valuek(from._internal_m_pu8valuek());
  }
  if (!from._internal_m_pu8pointq().empty()) {
    _this->_internal_set_m_pu8pointq(from._internal_m_pu8pointq());
  }
  if (!from._internal_m_pu8r().empty()) {
    _this->_internal_set_m_pu8r(from._internal_m_pu8r());
  }
  if (from._internal_m_u32version() != 0) {
    _this->_internal_set_m_u32version(from._internal_m_u32version());
  }
  if (from._internal_m_u32num() != 0) {
    _this->_internal_set_m_u32num(from._internal_m_u32num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlkCoSign::CopyFrom(const BlkCoSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BlkCoSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlkCoSign::IsInitialized() const {
  return true;
}

void BlkCoSign::InternalSwap(BlkCoSign* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_pu8prikey_, lhs_arena,
      &other->_impl_.m_pu8prikey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_pu8hashvalue_, lhs_arena,
      &other->_impl_.m_pu8hashvalue_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_pu8valuek_, lhs_arena,
      &other->_impl_.m_pu8valuek_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_pu8pointq_, lhs_arena,
      &other->_impl_.m_pu8pointq_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_pu8r_, lhs_arena,
      &other->_impl_.m_pu8r_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlkCoSign, _impl_.m_u32num_)
      + sizeof(BlkCoSign::_impl_.m_u32num_)
      - PROTOBUF_FIELD_OFFSET(BlkCoSign, _impl_.m_u32version_)>(
          reinterpret_cast<char*>(&_impl_.m_u32version_),
          reinterpret_cast<char*>(&other->_impl_.m_u32version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlkCoSign::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_BlkCoSignJava_2eproto_getter, &descriptor_table_BlkCoSignJava_2eproto_once,
      file_level_metadata_BlkCoSignJava_2eproto[0]);
}

// ===================================================================

class BlkCoSignJava::_Internal {
 public:
  static const ::proto::BlkCoSign& m_pcosign(const BlkCoSignJava* msg);
};

const ::proto::BlkCoSign&
BlkCoSignJava::_Internal::m_pcosign(const BlkCoSignJava* msg) {
  return *msg->_impl_.m_pcosign_;
}
BlkCoSignJava::BlkCoSignJava(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.BlkCoSignJava)
}
BlkCoSignJava::BlkCoSignJava(const BlkCoSignJava& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlkCoSignJava* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.m_pcosign_){nullptr}
    , decltype(_impl_.m_bserver_){}
    , decltype(_impl_.m_bfinal_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_m_pcosign()) {
    _this->_impl_.m_pcosign_ = new ::proto::BlkCoSign(*from._impl_.m_pcosign_);
  }
  ::memcpy(&_impl_.m_bserver_, &from._impl_.m_bserver_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.m_bfinal_) -
    reinterpret_cast<char*>(&_impl_.m_bserver_)) + sizeof(_impl_.m_bfinal_));
  // @@protoc_insertion_point(copy_constructor:proto.BlkCoSignJava)
}

inline void BlkCoSignJava::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.m_pcosign_){nullptr}
    , decltype(_impl_.m_bserver_){int64_t{0}}
    , decltype(_impl_.m_bfinal_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlkCoSignJava::~BlkCoSignJava() {
  // @@protoc_insertion_point(destructor:proto.BlkCoSignJava)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlkCoSignJava::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.m_pcosign_;
}

void BlkCoSignJava::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlkCoSignJava::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BlkCoSignJava)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.m_pcosign_ != nullptr) {
    delete _impl_.m_pcosign_;
  }
  _impl_.m_pcosign_ = nullptr;
  ::memset(&_impl_.m_bserver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.m_bfinal_) -
      reinterpret_cast<char*>(&_impl_.m_bserver_)) + sizeof(_impl_.m_bfinal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlkCoSignJava::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 m_bServer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.m_bserver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 m_bFinal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.m_bfinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.BlkCoSign m_pCoSign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_m_pcosign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlkCoSignJava::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.BlkCoSignJava)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 m_bServer = 1;
  if (this->_internal_m_bserver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_m_bserver(), target);
  }

  // int64 m_bFinal = 2;
  if (this->_internal_m_bfinal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_m_bfinal(), target);
  }

  // .proto.BlkCoSign m_pCoSign = 3;
  if (this->_internal_has_m_pcosign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::m_pcosign(this),
        _Internal::m_pcosign(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BlkCoSignJava)
  return target;
}

size_t BlkCoSignJava::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BlkCoSignJava)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.BlkCoSign m_pCoSign = 3;
  if (this->_internal_has_m_pcosign()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.m_pcosign_);
  }

  // int64 m_bServer = 1;
  if (this->_internal_m_bserver() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_bserver());
  }

  // int64 m_bFinal = 2;
  if (this->_internal_m_bfinal() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_m_bfinal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlkCoSignJava::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlkCoSignJava::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlkCoSignJava::GetClassData() const { return &_class_data_; }


void BlkCoSignJava::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlkCoSignJava*>(&to_msg);
  auto& from = static_cast<const BlkCoSignJava&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.BlkCoSignJava)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_m_pcosign()) {
    _this->_internal_mutable_m_pcosign()->::proto::BlkCoSign::MergeFrom(
        from._internal_m_pcosign());
  }
  if (from._internal_m_bserver() != 0) {
    _this->_internal_set_m_bserver(from._internal_m_bserver());
  }
  if (from._internal_m_bfinal() != 0) {
    _this->_internal_set_m_bfinal(from._internal_m_bfinal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlkCoSignJava::CopyFrom(const BlkCoSignJava& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BlkCoSignJava)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlkCoSignJava::IsInitialized() const {
  return true;
}

void BlkCoSignJava::InternalSwap(BlkCoSignJava* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlkCoSignJava, _impl_.m_bfinal_)
      + sizeof(BlkCoSignJava::_impl_.m_bfinal_)
      - PROTOBUF_FIELD_OFFSET(BlkCoSignJava, _impl_.m_pcosign_)>(
          reinterpret_cast<char*>(&_impl_.m_pcosign_),
          reinterpret_cast<char*>(&other->_impl_.m_pcosign_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlkCoSignJava::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_BlkCoSignJava_2eproto_getter, &descriptor_table_BlkCoSignJava_2eproto_once,
      file_level_metadata_BlkCoSignJava_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::BlkCoSign*
Arena::CreateMaybeMessage< ::proto::BlkCoSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::BlkCoSign >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::BlkCoSignJava*
Arena::CreateMaybeMessage< ::proto::BlkCoSignJava >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::BlkCoSignJava >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
